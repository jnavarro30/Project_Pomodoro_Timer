{"version":3,"sources":["pomodoro/Duration.js","pomodoro/Timer.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["Duration","session","focusDuration","setFocusDuration","breakDuration","setBreakDuration","durationLimit","limit","modify","setDuration","prevState","newState","className","data-testid","type","onClick","disabled","Timer","isTimerRunning","value","formatMinutes","duration","label","time","timeRemaining","trackProgress","style","display","seconds","minutes","Math","floor","d","Date","setSeconds","secs","getSeconds","formatTimeRemaining","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","max","Pomodoro","classNameToBoolean","useState","setIsTimerRunning","setSession","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ca47323.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Duration({ session, focusDuration, setFocusDuration, breakDuration, setBreakDuration }) {\r\n    const durationLimit = (limit, modify, setDuration) => {\r\n      if (setDuration === setFocusDuration) {\r\n        setDuration(prevState => {\r\n            let newState = modify === \"decrease\" ? prevState - 5 : prevState + 5;\r\n            if(modify === \"decrease\") return newState < limit ? limit : newState;\r\n            else return newState > limit ? limit : newState;\r\n        })\r\n      } else {\r\n        setDuration(prevState => {\r\n            let newState = modify === \"decrease\" ? prevState - 1 : prevState + 1;\r\n            if(modify === \"decrease\") return newState < limit ? limit : newState;\r\n            else return newState > limit ? limit : newState;\r\n        })\r\n      }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"input-group input-group-lg mb-2\">\r\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n              {/* TODO: Update this text to display the current focus session duration */}\r\n              Focus Duration: {focusDuration < 10 ? `0${focusDuration}` : focusDuration}:00\r\n            </span>\r\n            <div className=\"input-group-append\">\r\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"decrease-focus\"\r\n                onClick={() => durationLimit(5, \"decrease\", setFocusDuration)}\r\n                disabled={session}\r\n              >\r\n                <span className=\"oi oi-minus\" />\r\n              </button>\r\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"increase-focus\"\r\n                onClick={() => durationLimit(60, \"increase\", setFocusDuration)}\r\n                disabled={session}\r\n              >\r\n                <span className=\"oi oi-plus\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col\">\r\n          <div className=\"float-right\">\r\n            <div className=\"input-group input-group-lg mb-2\">\r\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                {/* TODO: Update this text to display the current break session duration */}\r\n                Break Duration: {breakDuration < 10 ? `0${breakDuration}` : breakDuration}:00\r\n              </span>\r\n              <div className=\"input-group-append\">\r\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"decrease-break\"\r\n                  onClick={() => durationLimit(1, \"decrease\", setBreakDuration)}\r\n                  disabled={session}\r\n                >\r\n                  <span className=\"oi oi-minus\" />\r\n                </button>\r\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"increase-break\"\r\n                  onClick={() => durationLimit(15, \"increase\", setBreakDuration)}\r\n                  disabled={session}\r\n                >\r\n                  <span className=\"oi oi-plus\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function Timer({ session, focusDuration, breakDuration, isTimerRunning }) {\r\n    let value = 0;\r\n\r\n    const formatMinutes = (duration) => {\r\n        return duration < 10 ? `0${duration}` : duration;\r\n    }\r\n\r\n    const formatTimeRemaining = (seconds) => {\r\n       const minutes = Math.floor(seconds / 60);\r\n       const d = new Date();\r\n       d.setSeconds(seconds);\r\n       const secs = d.getSeconds();\r\n     \r\n       return `${minutes < 10 ? `0${minutes}` : minutes}:${secs < 10 ? `0${secs}` : secs}`;\r\n    }\r\n\r\n    const trackProgress = () => {\r\n        let duration = session?.label === \"Focusing\" ? focusDuration * 60 : breakDuration * 60;\r\n        const time = (duration - session?.timeRemaining);\r\n        const percentage = (time / duration) * 100;\r\n        value = percentage;\r\n    }\r\n\r\n    trackProgress();\r\n\r\n\r\n    return (\r\n        <div style={{display: session ? \"block\" : \"none\"}}>\r\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n           {session ? (\r\n              <h2 data-testid=\"session-title\">\r\n              {session?.label} for {session?.label === \"Focusing\" ? formatMinutes(focusDuration) : formatMinutes(breakDuration)}:00 minutes\r\n            </h2>\r\n            ): null} \r\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n            {session ? (\r\n              <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {formatTimeRemaining(session?.timeRemaining)} remaining\r\n            </p>\r\n            ): null} \r\n            \r\n            {isTimerRunning ? '' : 'PAUSED'}\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={value} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${value}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Duration from \"./Duration\";\nimport Timer from \"./Timer\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Duration \n        session={session}\n        focusDuration={focusDuration} setFocusDuration={setFocusDuration}\n        breakDuration={breakDuration} setBreakDuration={setBreakDuration}\n      />\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={() => {\n                setIsTimerRunning(false);\n                setSession(null);\n              }}\n              disabled={!session}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <Timer session={session} \n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        isTimerRunning={isTimerRunning}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}